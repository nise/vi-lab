{
  "name": "acl",
  "version": "0.4.4",
  "description": "An Access Control List module, based on Redis with Express middleware support",
  "keywords": [
    "middleware",
    "acl",
    "web"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/optimalbits/node_acl.git"
  },
  "author": {
    "name": "Manuel Astudillo",
    "email": "manuel@optimalbits.com"
  },
  "homepage": "https://github.com/optimalbits/node_acl",
  "engines": {
    "node": ">= 0.4.1"
  },
  "main": "./index.js",
  "dependencies": {
    "async": "~0.2.9",
    "bluebird": "^2.2.2",
    "lodash": "~2.4.1",
    "mocha": "^1.21.3",
    "mongodb": "*",
    "redis": ">= 0.7.1"
  },
  "devDependencies": {
    "mocha": "~1.12",
    "chai": "~1.7.2"
  },
  "scripts": {
    "test": "mocha test/runner.js --reporter spec",
    "cover": "istanbul cover -- _mocha test/runner.js --reporter spec"
  },
  "readme": "#NODE ACL - Access Control Lists for Node\n\nThis module provides a minimalistic ACL implementation inspired by Zend_ACL.\n\nWhen you develop a web site or application you will soon notice that sessions are not enough to protect all the \navailable resources. Avoiding that malicious users access other users content proves a much more \ncomplicated task than anticipated. ACL can solve this problem in a flexible and elegant way.\n\nCreate roles and assign roles to users. Sometimes it may even be useful to create one role per user, \nto get the finest granularity possible, while in other situations you will give the *asterisk* permission \nfor admin kind of functionality.\n\nA Redis, MongoDB and In-Memory based backends are provided built-in in the module. There are other third party backends such as [*knex*](https://github.com/christophertrudel/node_acl_knex) based and [*firebase*](https://github.com/tonila/node_acl_firebase).\n\nFollow [manast](http://twitter.com/manast) for news and updates regarding this library.\n\n##Status\n\n[![BuildStatus](https://secure.travis-ci.org/OptimalBits/node_acl.png?branch=master)](http://travis-ci.org/OptimalBits/node_acl)\n\n##Features\n\n- Users\n- Roles\n- Hierarchies\n- Resources\n- Express middleware for protecting resources.\n- Robust implementation with good unit test coverage.\n\n##Installation\n\nUsing npm:\n\n```javascript\nnpm install acl\n```\n\n##Documentation\n\n* [addUserRoles](#addUserRoles)\n* [removeUserRoles](#removeUserRoles)\n* [userRoles](#userRoles)\n* [addRoleParents](#addRoleParents)\n* [removeRole](#removeRole)\n* [removeResource](#removeResource)\n* [allow](#allow)\n* [removeAllow](#removeAllow)\n* [allowedPermissions](#allowedPermissions)\n* [isAllowed](#isAllowed)\n* [areAnyRolesAllowed](#areAnyRolesAllowed)\n* [whatResources](#whatResources)\n* [middleware](#middleware)\n* [backend](#backend)\n\n##Examples\n\nCreate your acl module by requiring it and instantiating it with a valid backend instance:\n\n```javascript\nvar acl = require('acl');\n\n// Using redis backend\nacl = new acl(new acl.redisBackend(redisClient, prefix));\n\n// Or Using the memory backend\nacl = new acl(new acl.memoryBackend());\n\n// Or Using the mongodb backend\nacl = new acl(new acl.mongodbBackend(dbInstance, prefix));\n```\n\nAll the following functions return a promise or optionally take a callback with \nan err parameter as last parameter. We omit them in the examples for simplicity.\n\nCreate roles implicitly by giving them permissions:\n\n```javascript\n// guest is allowed to view blogs\nacl.allow('guest', 'blogs', 'view')\n\n// allow function accepts arrays as any parameter\nacl.allow('member', 'blogs', ['edit','view', 'delete'])\n```\n\nUsers are likewise created implicitly by assigning them roles:\n\n```javascript\nacl.addUserRoles('joed', 'guest')\n```\n\nHierarchies of roles can be created by assigning parents to roles:\n\n```javascript\nacl.addRoleParents('baz', ['foo','bar'])\n```\n\nNote that the order in which you call all the functions is irrelevant (you can add parents first and assign permissions to roles later)\n\n```javascript\nacl.allow('foo', ['blogs','forums','news'], ['view', 'delete'])\n```\n\nUse the wildcard to give all permissions:\n\n```javascript\nacl.allow('admin', ['blogs','forums'], '*')\n```\n\nSometimes is necessary to set permissions on many different roles and resources. This would\nlead to unnecessary nested callbacks for handling errors. Instead use the following:\n\n```javascript\nacl.allow([\n\t{\n\t\troles:['guest','member'], \n\t\tallows:[\n\t\t\t{resources:'blogs', permissions:'get'},\n\t\t\t{resources:['forums','news'], permissions:['get','put','delete']}\n\t\t]\n\t},\n\t{\n\t\troles:['gold','silver'], \n\t\tallows:[\n\t\t\t{resources:'cash', permissions:['sell','exchange']},\n\t\t\t{resources:['account','deposit'], permissions:['put','delete']}\n\t\t]\n\t}\n])\n```\n\nYou can check if a user has permissions to access a given resource with *isAllowed*:\n\n```javascript\nacl.isAllowed('joed', 'blogs', 'view', function(err, res){\n\tif(res){\n\t\tconsole.log(\"User joed is allowed to view blogs\")\n\t}\n}\n```\n\n\nOf course arrays are also accepted in this function:\n\n```javascript\nacl.isAllowed('jsmith', 'blogs', ['edit','view','delete'])\n```\n\nNote that all permissions must be full filed in order to get *true*.\n\n\nSometimes is necessary to know what permissions a given user has over certain resources:\n\n```javascript\nacl.allowedPermissions('james', ['blogs','forums'], function(err, permissions){\n\tconsole.log(permissions)\n})\n```\n\nIt will return an array of resource:[permissions] like this:\n\n```javascript\n[{'blogs' : ['get','delete']},\n {'forums':['get','put']}]\n```\n\n\nFinally, we provide a middleware for Express for easy protection of resources. \n\n```javascript\nacl.middleware()\n```\n\nWe can protect a resource like this:\n\n```javascript\napp.put('/blogs/:id', acl.middleware(), function(req, res, next){…}\n```\n\nThe middleware will protect the resource named by *req.url*, pick the user from *req.session.userId* and check the permission for *req.method*, so the above would be equivalent to something like this:\n\n```javascript\nacl.isAllowed(req.session.userId, '/blogs/12345', 'put')\n```\n\nThe middleware accepts 3 optional arguments, that are useful in some situations. For example, sometimes we \ncannot consider the whole url as the resource:\n\n```javascript\napp.put('/blogs/:id/comments/:commentId', acl.middleware(3), function(req, res, next){…}\n```\n\nIn this case the resource will be just the three first components of the url (without the ending slash).\n\nIt is also possible to add a custom userId or check for other permissions than the method:\n\n```javascript\napp.put('/blogs/:id/comments/:commentId', acl.middleware(3, 'joed', 'post'), function(req, res, next){…}\n```\n\n## Methods\n\n<a name=\"addUserRoles\"/>\n### addUserRoles( userId, roles, function(err) )\n\nAdds roles to a given user id.\n\n__Arguments__\n \n```javascript\n    userId   {String|Number} User id.\n    roles    {String|Array} Role(s) to add to the user id.\n    callback {Function} Callback called when finished.\n```\n\n---------------------------------------\n\n<a name=\"removeUserRoles\"/>\n### removeUserRoles( userId, roles, function(err) )\n  \nRemove roles from a given user.\n\n__Arguments__\n\n```javascript\n    userId   {String|Number} User id.\n    roles    {String|Array} Role(s) to remove to the user id.\n    callback {Function} Callback called when finished.\n```\n\n---------------------------------------\n\n<a name=\"userRoles\" />\n### userRoles( userId, function(err, roles) )\n\nReturn all the roles from a given user.\n\n__Arguments__\n  \n```javascript\n    userId   {String|Number} User id.\n    callback {Function} Callback called when finished.\n```\n\n---------------------------------------\n\n<a name=\"addRoleParents\" />\n### addRoleParents( role, parents, function(err) )\n\nAdds a parent or parent list to role.\n\n__Arguments__\n\n```javascript\n    role     {String} User id.\n    parents  {String|Array} Role(s) to remove to the user id.\n    callback {Function} Callback called when finished.\n```\n\n---------------------------------------\n\n<a name=\"removeRole\" />\n### removeRole( role, function(err) )\n  \nRemoves a role from the system.\n\n__Arguments__\n  \n```javascript\n    role     {String} Role to be removed\n    callback {Function} Callback called when finished.\n```\n\n---------------------------------------\n\n<a name=\"removeResource\" />\n### removeResource( resource, function(err) )\n  \nRemoves a resource from the system\n\n__Arguments__\n  \n```javascript\n    resource {String} Resource to be removed\n    callback {Function} Callback called when finished.\n```\n\n---------------------------------------\n\n<a name=\"allow\" />\n### allow( roles, resources, permissions, function(err) )\n\nAdds the given permissions to the given roles over the given resources.\n\n__Arguments__\n  \n```javascript\n    roles       {String|Array} role(s) to add permissions to.\n    resources   {String|Array} resource(s) to add permisisons to.\n    permissions {String|Array} permission(s) to add to the roles over the resources.\n    callback    {Function} Callback called when finished.\n```\n\n### allow( permissionsArray, function(err) )\n  \n__Arguments__\n\n```javascript\n    permissionsArray {Array} Array with objects expressing what permissions to give.\n       [{roles:{String|Array}, allows:[{resources:{String|Array}, permissions:{String|Array}]]\n  \n    callback         {Function} Callback called when finished.\n```\n\n---------------------------------------\n\n<a name=\"removeAllow\" />\n###  removeAllow( role, resources, permissions, function(err) )\n\nRemove permissions from the given roles owned by the given role.\n\nNote: we loose atomicity when removing empty role_resources.\n\n__Arguments__\n  \n```javascript\n    role        {String}\n    resources   {String|Array}\n    permissions {String|Array}\n    callback    {Function}\n```\n\n---------------------------------------\n\n<a name=\"allowedPermissions\" />\n### allowedPermissions( userId, resources, function(err, obj) )\n\nReturns all the allowable permissions a given user have to\naccess the given resources.\n  \nIt returns an array of objects where every object maps a \nresource name to a list of permissions for that resource.\n\n__Arguments__\n  \n```javascript\n    userId    {String|Number} User id.\n    resources {String|Array} resource(s) to ask permissions for.\n    callback  {Function} Callback called when finished.\n```\n\n---------------------------------------\n\n<a name=\"isAllowed\" />\n### isAllowed( userId, resource, permissions, function(err, allowed) )\n  \nChecks if the given user is allowed to access the resource for the given \npermissions (note: it must fulfill all the permissions).\n\n__Arguments__\n  \n```javascript\n    userId      {String|Number} User id.\n    resource    {String} resource to ask permissions for.\n    permissions {String|Array} asked permissions.\n    callback    {Function} Callback called wish the result.\n```\n\n---------------------------------------\n<a name=\"areAnyRolesAllowed\" />\n### areAnyRolesAllowed( roles, resource, permissions, function(err, allowed) )\n  \nReturns true if any of the given roles have the right permissions.\n\n__Arguments__\n  \n```javascript\n    roles       {String|Array} Role(s) to check the permissions for.\n    resource    {String} resource to ask permissions for.\n    permissions {String|Array} asked permissions.\n    callback    {Function} Callback called wish the result.\n```\n\n---------------------------------------\n<a name=\"whatResources\" />\n### whatResources(role, function(err, {resourceName: [permissions]})\n\nReturns what resources a given role has permissions over.\n\n__Arguments__\n\n```javascript\n    role        {String|Array} Roles\n    callback    {Function} Callback called with the result.\n```\n\nwhatResources(role, permissions, function(err, resources) )\n    \nReturns what resources a role has the given permissions over.\n\n__Arguments__\n  \n```javascript\n    role        {String|Array} Roles\n    permissions {String|Array} Permissions\n    callback    {Function} Callback called wish the result.\n```\n\n---------------------------------------\n\n<a name=\"middleware\" />\n### middleware( [numPathComponents, userId, permissions] )\n\nMiddleware for express.\n\nTo create a custom getter for userId, pass a function(req, res) which returns the userId when called (must not be async).\n\n__Arguments__\n\n```javascript\n    numPathComponents {Number} number of components in the url to be considered part of the resource name.\n    userId            {String|Number|Function} the user id for the acl system (defaults to req.session.userId)\n    permissions       {String|Array} the permission(s) to check for (defaults to req.method.toLowerCase())\n```\n\n---------------------------------------\n\n<a name=\"backend\" />\n### backend( db, [prefix] )\n\nCreates a backend instance. All backends except Memory require driver or database instance. `useSingle` is only applicable to the MongoDB backend.\n\n__Arguments__\n\n```javascript\n    db \t\t  {Object} Database instance\n    prefix \t  {String} Optional collection prefix\n    useSingle \t  {Boolean} Create one collection for all resources (defaults to false)\n```\n\n```javascript\nvar mongodb = require('mongodb'); \nmongodb.connect(\"mongodb://127.0.0.1:27017/acltest\", function(error, db) {\n  var mongoBackend = new acl.mongodbBackend(db, 'acl_');\n});   \n```\n\nCreates a new MongoDB backend using database instance `db`.\n\n```javascript\nvar client = require('redis').createClient(6379, '127.0.0.1', {no_ready_check: true});\nvar redisBackend = new redisBackend(client);\n```\n\nCreates a new Redis backend using Redis client `client`.\n\n##Tests\n\nRun tests with `npm` (requires mocha):\n```javascript\n npm test\n```\n\n## Future work\n\n- Support for denials (deny a role a given permission)\n\n\n##License \n\n(The MIT License)\n\nCopyright (c) 2011-2013 Manuel Astudillo <manuel@optimalbits.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/optimalbits/node_acl/issues"
  },
  "_id": "acl@0.4.4",
  "_from": "acl@"
}
