{
  "name": "redis",
  "version": "2.2.3",
  "description": "Redis client library",
  "keywords": [
    "database",
    "redis"
  ],
  "author": {
    "name": "Matt Ranney",
    "email": "mjr@ranney.com"
  },
  "license": "MIT",
  "main": "./index.js",
  "scripts": {
    "coveralls": "nyc report --reporter=text-lcov | coveralls",
    "coverage": "nyc report --reporter=html",
    "benchmark": "node benchmarks/multi_bench.js",
    "test": "nyc ./node_modules/.bin/_mocha ./test/*.js ./test/commands/*.js ./test/parser/*.js --timeout=8000",
    "pretest": "optional-dev-dependency hiredis",
    "posttest": "jshint ."
  },
  "dependencies": {
    "double-ended-queue": "^2.1.0-0"
  },
  "devDependencies": {
    "coveralls": "^2.11.2",
    "jshint": "^2.8.0",
    "metrics": "^0.1.9",
    "mocha": "^2.3.2",
    "nyc": "^3.2.2",
    "optional-dev-dependency": "^1.1.0",
    "tcp-port-used": "^0.1.2",
    "uuid": "^2.0.1",
    "win-spawn": "^2.0.0",
    "bluebird": "^2.10.0"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/NodeRedis/node_redis.git"
  },
  "bugs": {
    "url": "https://github.com/NodeRedis/node_redis/issues"
  },
  "homepage": "https://github.com/NodeRedis/node_redis",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "readme": "redis - a node.js redis client\n===========================\n\n[![Build Status](https://travis-ci.org/NodeRedis/node_redis.png)](https://travis-ci.org/NodeRedis/node_redis)\n[![Coverage Status](https://coveralls.io/repos/NodeRedis/node_redis/badge.svg?branch=)](https://coveralls.io/r/NodeRedis/node_redis?branch=)\n[![Windows Tests](https://img.shields.io/appveyor/ci/bcoe/node-redis/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/bcoe/node-redis)\n\nThis is a complete and feature rich Redis client for node.js. It supports all Redis commands and focuses on performance.\n\nInstall with:\n\n    npm install redis\n\n## Usage\n\nSimple example, included as `examples/simple.js`:\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient();\n\n// if you'd like to select database 3, instead of 0 (default), call\n// client.select(3, function() { /* ... */ });\n\nclient.on(\"error\", function (err) {\n    console.log(\"Error \" + err);\n});\n\nclient.set(\"string key\", \"string val\", redis.print);\nclient.hset(\"hash key\", \"hashtest 1\", \"some value\", redis.print);\nclient.hset([\"hash key\", \"hashtest 2\", \"some other value\"], redis.print);\nclient.hkeys(\"hash key\", function (err, replies) {\n    console.log(replies.length + \" replies:\");\n    replies.forEach(function (reply, i) {\n        console.log(\"    \" + i + \": \" + reply);\n    });\n    client.quit();\n});\n```\n\nThis will display:\n\n    mjr:~/work/node_redis (master)$ node example.js\n    Reply: OK\n    Reply: 0\n    Reply: 0\n    2 replies:\n        0: hashtest 1\n        1: hashtest 2\n    mjr:~/work/node_redis (master)$\n\nNote that the API is entire asynchronous. To get data back from the server,\nyou'll need to use a callback. The return value from most of the API is a\nbackpressure indicator.\n\n### Promises\n\nYou can also use node_redis with promises by promisifying node_redis with [bluebird](https://github.com/petkaantonov/bluebird) as in:\n\n```js\nvar redis = require('redis');\nbluebird.promisifyAll(redis.RedisClient.prototype);\nbluebird.promisifyAll(redis.Multi.prototype);\n```\n\nIt'll add a *Async* to all node_redis functions (e.g. return client.getAsync().then())\n\n```js\n// We expect a value 'foo': 'bar' to be present\n// So instead of writing client.get('foo', cb); you have to write:\nreturn client.getAsync('foo').then(function(res) {\n    console.log(res); // => 'bar'\n});\n\n// Using multi with promises looks like:\n\nreturn client.multi().get('foo').execAsync().then(function(res) {\n    console.log(res); // => 'bar'\n});\n```\n\n### Sending Commands\n\nEach Redis command is exposed as a function on the `client` object.\nAll functions take either an `args` Array plus optional `callback` Function or\na variable number of individual arguments followed by an optional callback.\nHere are examples how to use the api:\n\n```js\nclient.hmset([\"key\", \"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\"], function (err, res) {});\n// Works the same as\nclient.hmset(\"key\", [\"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\"], function (err, res) {});\n// Or\nclient.hmset(\"key\", \"test keys 1\", \"test val 1\", \"test keys 2\", \"test val 2\", function (err, res) {});\n```\n\nNote that in either form the `callback` is optional:\n\n```js\nclient.set(\"some key\", \"some val\");\nclient.set([\"some other key\", \"some val\"]);\n```\n\nIf the key is missing, reply will be null. Only if the [Redis Command Reference](http://redis.io/commands) states something else it will not be null.\n\n```js\nclient.get(\"missingkey\", function(err, reply) {\n    // reply is null when the key is missing\n    console.log(reply);\n});\n```\n\nFor a list of Redis commands, see [Redis Command Reference](http://redis.io/commands)\n\nThe commands can be specified in uppercase or lowercase for convenience. `client.get()` is the same as `client.GET()`.\n\nMinimal parsing is done on the replies. Commands that return a single line reply return JavaScript Strings,\ninteger replies return JavaScript Numbers, \"bulk\" replies return node Buffers, and \"multi bulk\" replies return a\nJavaScript Array of node Buffers. `HGETALL` returns an Object with Buffers keyed by the hash keys.\n\n# API\n\n## Connection Events\n\n`client` will emit some events about the state of the connection to the Redis server.\n\n### \"ready\"\n\n`client` will emit `ready` once a connection is established. Commands issued before the `ready` event are queued,\nthen replayed just before this event is emitted.\n\n### \"connect\"\n\n`client` will emit `connect` at the same time as it emits `ready` unless `client.options.no_ready_check`\nis set. If this options is set, `connect` will be emitted when the stream is connected.\n\n### \"reconnecting\"\n\n`client` will emit `reconnecting` when trying to reconnect to the Redis server after losing the connection. Listeners\nare passed an object containing `delay` (in ms) and `attempt` (the attempt #) attributes.\n\n### \"error\"\n\n`client` will emit `error` when encountering an error connecting to the Redis server or when any other in node_redis occurs.\n\nSo please attach the error listener to node_redis.\n\n### \"end\"\n\n`client` will emit `end` when an established Redis server connection has closed.\n\n### \"drain\"\n\n`client` will emit `drain` when the TCP connection to the Redis server has been buffering, but is now\nwritable. This event can be used to stream commands in to Redis and adapt to backpressure.\n\nAll commands return a boolean if the stream had to buffer or not. If false is returned the stream had to buffer.\nThat way you can decide when to reduce your send rate and resume sending commands when you get `drain`.\n\nYou can manually control the low water and high water marks by passing ommand_queue_high_water` and `command_queue_low_water` to the client options.\nCheck the [Node.js streams API](https://nodejs.org/api/stream.html) for further info.\n\n### \"idle\"\n\n`client` will emit `idle` when there are no outstanding commands that are awaiting a response.\n\n## redis.createClient()\nIf you have `redis-server` running on the same computer as node, then the defaults for\nport and host are probably fine and you don't need to supply any arguments. `createClient()` returns a `RedisClient` object.\n\n### overloading\n* `redis.createClient()`\n* `redis.createClient(options)`\n* `redis.createClient(unix_socket, options)`\n* `redis.createClient('redis://user:pass@host:port', options)`\n* `redis.createClient(port, host, options)`\n\n `options` is an object with the following possible properties:\n\n* `host`: *127.0.0.1*; The host to connect to\n* `port`: *6370*; The port to connect to\n* `parser`: *hiredis*; Which Redis protocol reply parser to use. If `hiredis` is not installed it will fallback to `javascript`.\n* `return_buffers`: *false*; If set to `true`, then all replies will be sent to callbacks as Buffers instead of Strings.\n* `detect_buffers`: *false*; If set to `true`, then replies will be sent to callbacks as Buffers\nif any of the input arguments to the original command were Buffers.\nThis option lets you switch between Buffers and Strings on a per-command basis, whereas `return_buffers` applies to\nevery command on a client.\n* `socket_nodelay`: *true*; Disables the [Nagle algorithm](https://en.wikipedia.org/wiki/Nagle%27s_algorithm).\nSetting this option to `false` can result in additional throughput at the cost of more latency.\nMost applications will want this set to `true`.\n* `socket_keepalive` *true*; Whether the keep-alive functionality is enabled on the underlying socket.\n* `no_ready_check`: *false*; When a connection is established to the Redis server, the server might still\nbe loading the database from disk. While loading the server will not respond to any commands. To work around this,\n`node_redis` has a \"ready check\" which sends the `INFO` command to the server. The response from the `INFO` command\nindicates whether the server is ready for more commands. When ready, `node_redis` emits a `ready` event.\nSetting `no_ready_check` to `true` will inhibit this check.\n* `enable_offline_queue`: *true*; By default, if there is no active\nconnection to the redis server, commands are added to a queue and are executed\nonce the connection has been established. Setting `enable_offline_queue` to\n`false` will disable this feature and the callback will be executed immediately\nwith an error, or an error will be emitted if no callback is specified.\n* `retry_max_delay`: *null*; By default every time the client tries to connect and fails the reconnection delay almost doubles.\nThis delay normally grows infinitely, but setting `retry_max_delay` limits it to the maximum value, provided in milliseconds.\n* `connect_timeout`: *86400000*; Setting `connect_timeout` limits total time for client to reconnect.\nThe value is provided in milliseconds and is counted once the disconnect occurred. The last retry is going to happen exactly at the timeout time.\nThat way the default is to try reconnecting until 24h passed.\n* `max_attempts`: *0*; By default client will try reconnecting until connected. Setting `max_attempts`\nlimits total amount of connection tries. Setting this to 1 will prevent any reconnect tries.\n* `auth_pass`: *null*; If set, client will run redis auth command on connect.\n* `family`: *IPv4*; You can force using IPv6 if you set the family to 'IPv6'. See Node.js [net](https://nodejs.org/api/net.html) or [dns](https://nodejs.org/api/dns.html) modules how to use the family type.\n* `disable_resubscribing`: *false*; If set to `true`, a client won't resubscribe after disconnecting\n* `rename_commands`: *null*; pass a object with renamed commands to use those instead of the original functions. See the [redis security topics](http://redis.io/topics/security) for more info.\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient({detect_buffers: true});\n\nclient.set(\"foo_rand000000000000\", \"OK\");\n\n// This will return a JavaScript String\nclient.get(\"foo_rand000000000000\", function (err, reply) {\n    console.log(reply.toString()); // Will print `OK`\n});\n\n// This will return a Buffer since original key is specified as a Buffer\nclient.get(new Buffer(\"foo_rand000000000000\"), function (err, reply) {\n    console.log(reply.toString()); // Will print `<Buffer 4f 4b>`\n});\nclient.end();\n```\n\n## client.auth(password, callback)\n\nWhen connecting to a Redis server that requires authentication, the `AUTH` command must be sent as the\nfirst command after connecting. This can be tricky to coordinate with reconnections, the ready check,\netc. To make this easier, `client.auth()` stashes `password` and will send it after each connection,\nincluding reconnections. `callback` is invoked only once, after the response to the very first\n`AUTH` command sent.\nNOTE: Your call to `client.auth()` should not be inside the ready handler. If\nyou are doing this wrong, `client` will emit an error that looks\nsomething like this `Error: Ready check failed: ERR operation not permitted`.\n\n## client.end([flush])\n\nForcibly close the connection to the Redis server. Note that this does not wait until all replies have been parsed.\nIf you want to exit cleanly, call `client.quit()` to send the `QUIT` command after you have handled all replies.\n\nIf flush is set to true, all commands will be rejected instead of ignored after using `.end`.\n\nThis example closes the connection to the Redis server before the replies have been read. You probably don't\nwant to do this:\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient();\n\nclient.set(\"foo_rand000000000000\", \"some fantastic value\");\nclient.end(); // No further commands will be processed\nclient.get(\"foo_rand000000000000\", function (err, reply) {\n    // This won't be called anymore, since flush has not been set to true!\n    console.log(err);\n});\n```\n\n`client.end()` is useful for timeout cases where something is stuck or taking too long and you want\nto start over.\n\n## client.unref()\n\nCall `unref()` on the underlying socket connection to the Redis server, allowing the program to exit once no more commands are pending.\n\nThis is an **experimental** feature, and only supports a subset of the Redis protocol. Any commands where client state is saved on the Redis server, e.g. `*SUBSCRIBE` or the blocking `BL*` commands will *NOT* work with `.unref()`.\n\n```js\nvar redis = require(\"redis\")\nvar client = redis.createClient()\n\n/*\n    Calling unref() will allow this program to exit immediately after the get command finishes. Otherwise the client would hang as long as the client-server connection is alive.\n*/\nclient.unref()\nclient.get(\"foo\", function (err, value){\n    if (err) throw(err)\n    console.log(value)\n})\n```\n\n## Friendlier hash commands\n\nMost Redis commands take a single String or an Array of Strings as arguments, and replies are sent back as a single String or an Array of Strings.\nWhen dealing with hash values, there are a couple of useful exceptions to this.\n\n### client.hgetall(hash)\n\nThe reply from an HGETALL command will be converted into a JavaScript Object by `node_redis`. That way you can interact\nwith the responses using JavaScript syntax.\n\nExample:\n\n```js\nclient.hmset(\"hosts\", \"mjr\", \"1\", \"another\", \"23\", \"home\", \"1234\");\nclient.hgetall(\"hosts\", function (err, obj) {\n    console.dir(obj);\n});\n```\n\nOutput:\n\n```js\n{ mjr: '1', another: '23', home: '1234' }\n```\n\n### client.hmset(hash, obj, [callback])\n\nMultiple values in a hash can be set by supplying an object:\n\n```js\nclient.HMSET(key2, {\n    \"0123456789\": \"abcdefghij\", // NOTE: key and value will be coerced to strings\n    \"some manner of key\": \"a type of value\"\n});\n```\n\nThe properties and values of this Object will be set as keys and values in the Redis hash.\n\n### client.hmset(hash, key1, val1, ... keyn, valn, [callback])\n\nMultiple values may also be set by supplying a list:\n\n```js\nclient.HMSET(key1, \"0123456789\", \"abcdefghij\", \"some manner of key\", \"a type of value\");\n```\n\n## Publish / Subscribe\n\nHere is a simple example of the API for publish / subscribe. This program opens two\nclient connections, subscribes to a channel on one of them, and publishes to that\nchannel on the other:\n\n```js\nvar redis = require(\"redis\"),\n    client1 = redis.createClient(), client2 = redis.createClient(),\n    msg_count = 0;\n\nclient1.on(\"subscribe\", function (channel, count) {\n    client2.publish(\"a nice channel\", \"I am sending a message.\");\n    client2.publish(\"a nice channel\", \"I am sending a second message.\");\n    client2.publish(\"a nice channel\", \"I am sending my last message.\");\n});\n\nclient1.on(\"message\", function (channel, message) {\n    console.log(\"client1 channel \" + channel + \": \" + message);\n    msg_count += 1;\n    if (msg_count === 3) {\n        client1.unsubscribe();\n        client1.end();\n        client2.end();\n    }\n});\n\nclient1.subscribe(\"a nice channel\");\n```\n\nWhen a client issues a `SUBSCRIBE` or `PSUBSCRIBE`, that connection is put into a \"subscriber\" mode.\nAt that point, only commands that modify the subscription set are valid. When the subscription\nset is empty, the connection is put back into regular mode.\n\nIf you need to send regular commands to Redis while in subscriber mode, just open another connection.\n\n## Subscriber Events\n\nIf a client has subscriptions active, it may emit these events:\n\n### \"message\" (channel, message)\n\nClient will emit `message` for every message received that matches an active subscription.\nListeners are passed the channel name as `channel` and the message Buffer as `message`.\n\n### \"pmessage\" (pattern, channel, message)\n\nClient will emit `pmessage` for every message received that matches an active subscription pattern.\nListeners are passed the original pattern used with `PSUBSCRIBE` as `pattern`, the sending channel\nname as `channel`, and the message Buffer as `message`.\n\n### \"subscribe\" (channel, count)\n\nClient will emit `subscribe` in response to a `SUBSCRIBE` command. Listeners are passed the\nchannel name as `channel` and the new count of subscriptions for this client as `count`.\n\n### \"psubscribe\" (pattern, count)\n\nClient will emit `psubscribe` in response to a `PSUBSCRIBE` command. Listeners are passed the\noriginal pattern as `pattern`, and the new count of subscriptions for this client as `count`.\n\n### \"unsubscribe\" (channel, count)\n\nClient will emit `unsubscribe` in response to a `UNSUBSCRIBE` command. Listeners are passed the\nchannel name as `channel` and the new count of subscriptions for this client as `count`. When\n`count` is 0, this client has left subscriber mode and no more subscriber events will be emitted.\n\n### \"punsubscribe\" (pattern, count)\n\nClient will emit `punsubscribe` in response to a `PUNSUBSCRIBE` command. Listeners are passed the\nchannel name as `channel` and the new count of subscriptions for this client as `count`. When\n`count` is 0, this client has left subscriber mode and no more subscriber events will be emitted.\n\n## client.multi([commands])\n\n`MULTI` commands are queued up until an `EXEC` is issued, and then all commands are run atomically by\nRedis. The interface in `node_redis` is to return an individual `Multi` object by calling `client.multi()`.\nIf any command fails to queue, all commands are rolled back and none is going to be executed (For further information look at [transactions](http://redis.io/topics/transactions)).\n\n```js\nvar redis  = require(\"./index\"),\n    client = redis.createClient(), set_size = 20;\n\nclient.sadd(\"bigset\", \"a member\");\nclient.sadd(\"bigset\", \"another member\");\n\nwhile (set_size > 0) {\n    client.sadd(\"bigset\", \"member \" + set_size);\n    set_size -= 1;\n}\n\n// multi chain with an individual callback\nclient.multi()\n    .scard(\"bigset\")\n    .smembers(\"bigset\")\n    .keys(\"*\", function (err, replies) {\n        // NOTE: code in this callback is NOT atomic\n        // this only happens after the the .exec call finishes.\n        client.mget(replies, redis.print);\n    })\n    .dbsize()\n    .exec(function (err, replies) {\n        console.log(\"MULTI got \" + replies.length + \" replies\");\n        replies.forEach(function (reply, index) {\n            console.log(\"Reply \" + index + \": \" + reply.toString());\n        });\n    });\n```\n\n### Multi.exec( callback )\n\n`client.multi()` is a constructor that returns a `Multi` object. `Multi` objects share all of the\nsame command methods as `client` objects do. Commands are queued up inside the `Multi` object\nuntil `Multi.exec()` is invoked.\n\nIf your code contains an syntax error an EXECABORT error is going to be thrown and all commands are going to be aborted. That error contains a `.errors` property that contains the concret errors.\nIf all commands were queued successfully and an error is thrown by redis while processing the commands that error is going to be returned in the result array! No other command is going to be aborted though than the onces failing.\n\nYou can either chain together `MULTI` commands as in the above example, or you can queue individual\ncommands while still sending regular client command as in this example:\n\n```js\nvar redis  = require(\"redis\"),\n    client = redis.createClient(), multi;\n\n// start a separate multi command queue\nmulti = client.multi();\nmulti.incr(\"incr thing\", redis.print);\nmulti.incr(\"incr other thing\", redis.print);\n\n// runs immediately\nclient.mset(\"incr thing\", 100, \"incr other thing\", 1, redis.print);\n\n// drains multi queue and runs atomically\nmulti.exec(function (err, replies) {\n    console.log(replies); // 101, 2\n});\n\n// you can re-run the same transaction if you like\nmulti.exec(function (err, replies) {\n    console.log(replies); // 102, 3\n    client.quit();\n});\n```\n\nIn addition to adding commands to the `MULTI` queue individually, you can also pass an array\nof commands and arguments to the constructor:\n\n```js\nvar redis  = require(\"redis\"),\n    client = redis.createClient(), multi;\n\nclient.multi([\n    [\"mget\", \"multifoo\", \"multibar\", redis.print],\n    [\"incr\", \"multifoo\"],\n    [\"incr\", \"multibar\"]\n]).exec(function (err, replies) {\n    console.log(replies);\n});\n```\n\n### Multi.exec_atomic( callback )\n\nIdentical to Multi.exec but with the difference that executing a single command will not use transactions.\n\n## client.batch([commands])\n\nIdentical to .multi without transactions. This is recommended if you want to execute many commands at once but don't have to rely on transactions.\n\n`BATCH` commands are queued up until an `EXEC` is issued, and then all commands are run atomically by\nRedis. The interface in `node_redis` is to return an individual `Batch` object by calling `client.batch()`.\nThe only difference between .batch and .multi is that no transaction is going to be used.\nBe aware that the errors are - just like in multi statements - in the result. Otherwise both, errors and results could be returned at the same time.\n\nIf you fire many commands at once this is going to **boost the execution speed by up to 400%** [sic!] compared to fireing the same commands in a loop without waiting for the result! See the benchmarks for further comparison. Please remember that all commands are kept in memory until they are fired.\n\n## Monitor mode\n\nRedis supports the `MONITOR` command, which lets you see all commands received by the Redis server\nacross all client connections, including from other client libraries and other computers.\n\nAfter you send the `MONITOR` command, no other commands are valid on that connection. `node_redis`\nwill emit a `monitor` event for every new monitor message that comes across. The callback for the\n`monitor` event takes a timestamp from the Redis server and an array of command arguments.\n\nHere is a simple example:\n\n```js\nvar client  = require(\"redis\").createClient(),\n    util = require(\"util\");\n\nclient.monitor(function (err, res) {\n    console.log(\"Entering monitoring mode.\");\n});\n\nclient.on(\"monitor\", function (time, args) {\n    console.log(time + \": \" + util.inspect(args));\n});\n```\n\n# Extras\n\nSome other things you might like to know about.\n\n## client.server_info\n\nAfter the ready probe completes, the results from the INFO command are saved in the `client.server_info`\nobject.\n\nThe `versions` key contains an array of the elements of the version string for easy comparison.\n\n    > client.server_info.redis_version\n    '2.3.0'\n    > client.server_info.versions\n    [ 2, 3, 0 ]\n\n## redis.print()\n\nA handy callback function for displaying return values when testing. Example:\n\n```js\nvar redis = require(\"redis\"),\n    client = redis.createClient();\n\nclient.on(\"connect\", function () {\n    client.set(\"foo_rand000000000000\", \"some fantastic value\", redis.print);\n    client.get(\"foo_rand000000000000\", redis.print);\n});\n```\n\nThis will print:\n\n    Reply: OK\n    Reply: some fantastic value\n\nNote that this program will not exit cleanly because the client is still connected.\n\n## Multi-word commands\n\nTo execute redis multi-word commands like `SCRIPT LOAD` or `CLIENT LIST` pass\nthe second word as first parameter:\n\n    client.script('load', 'return 1');\n    client.multi().script('load', 'return 1').exec(...);\n    client.multi([['script', 'load', 'return 1']]).exec(...);\n\n## client.send_command(command_name, args, callback)\n\nUsed internally to send commands to Redis. Nearly all Redis commands have been added to the `client` object.\nHowever, if new commands are introduced before this library is updated, you can use `send_command()` to send arbitrary commands to Redis.\nThe command has to be lower case.\n\nAll commands are sent as multi-bulk commands. `args` can either be an Array of arguments, or omitted / set to undefined.\n\n## client.connected\n\nBoolean tracking the state of the connection to the Redis server.\n\n## client.command_queue.length\n\nThe number of commands that have been sent to the Redis server but not yet replied to. You can use this to\nenforce some kind of maximum queue depth for commands while connected.\n\nDon't mess with `client.command_queue` though unless you really know what you are doing.\n\n## client.offline_queue.length\n\nThe number of commands that have been queued up for a future connection. You can use this to enforce\nsome kind of maximum queue depth for pre-connection commands.\n\n## client.retry_delay\n\nCurrent delay in milliseconds before a connection retry will be attempted. This starts at `200`.\n\n## client.retry_backoff\n\nMultiplier for future retry timeouts. This should be larger than 1 to add more time between retries.\nDefaults to 1.7. The default initial connection retry is 200, so the second retry will be 340, followed by 578, etc.\n\n### Commands with Optional and Keyword arguments\n\nThis applies to anything that uses an optional `[WITHSCORES]` or `[LIMIT offset count]` in the [redis.io/commands](http://redis.io/commands) documentation.\n\nExample:\n```js\nvar args = [ 'myzset', 1, 'one', 2, 'two', 3, 'three', 99, 'ninety-nine' ];\nclient.zadd(args, function (err, response) {\n    if (err) throw err;\n    console.log('added '+response+' items.');\n\n    // -Infinity and +Infinity also work\n    var args1 = [ 'myzset', '+inf', '-inf' ];\n    client.zrevrangebyscore(args1, function (err, response) {\n        if (err) throw err;\n        console.log('example1', response);\n        // write your code here\n    });\n\n    var max = 3, min = 1, offset = 1, count = 2;\n    var args2 = [ 'myzset', max, min, 'WITHSCORES', 'LIMIT', offset, count ];\n    client.zrevrangebyscore(args2, function (err, response) {\n        if (err) throw err;\n        console.log('example2', response);\n        // write your code here\n    });\n});\n```\n\n## Performance\n\nMuch effort has been spent to make `node_redis` as fast as possible for common\noperations. As pipelining happens naturally from shared connections, overall\nefficiency goes up.\n\nHere are results of `multi_bench.js` which is similar to `redis-benchmark` from the Redis distribution.\n\nhiredis parser (Lenovo T450s i7-5600U):\n\n```\nClient count: 5, node version: 4.1.2, server version: 3.0.3, parser: hiredis\n         PING,         1/5 min/max/avg/p95:    0/   4/   0.02/   0.00   1223ms total,  40883.07 ops/sec\n         PING,        50/5 min/max/avg/p95:    0/   3/   0.50/   1.00    497ms total, 100603.62 ops/sec\n         PING,  batch 50/5 min/max/avg/p95:    0/   1/   0.15/   1.00    308ms total, 324675.32 ops/sec\n   SET 4B str,         1/5 min/max/avg/p95:    0/   2/   0.03/   0.00   1402ms total,  35663.34 ops/sec\n   SET 4B str,        50/5 min/max/avg/p95:    0/   2/   0.53/   1.00    534ms total,  93632.96 ops/sec\n   SET 4B str,  batch 50/5 min/max/avg/p95:    0/   1/   0.19/   1.00    392ms total, 255102.04 ops/sec\n   SET 4B buf,         1/5 min/max/avg/p95:    0/   2/   0.05/   1.00   2433ms total,  20550.76 ops/sec\n   SET 4B buf,        50/5 min/max/avg/p95:    0/   5/   1.65/   3.00   1652ms total,  30266.34 ops/sec\n   SET 4B buf,  batch 50/5 min/max/avg/p95:    0/   3/   0.36/   1.00    726ms total, 137741.05 ops/sec\n   GET 4B str,         1/5 min/max/avg/p95:    0/   1/   0.03/   0.00   1314ms total,  38051.75 ops/sec\n   GET 4B str,        50/5 min/max/avg/p95:    0/   3/   0.53/   1.00    529ms total,  94517.96 ops/sec\n   GET 4B str,  batch 50/5 min/max/avg/p95:    0/   1/   0.16/   1.00    328ms total, 304878.05 ops/sec\n   GET 4B buf,         1/5 min/max/avg/p95:    0/   2/   0.03/   0.00   1389ms total,  35997.12 ops/sec\n   GET 4B buf,        50/5 min/max/avg/p95:    0/   2/   0.52/   1.00    519ms total,  96339.11 ops/sec\n   GET 4B buf,  batch 50/5 min/max/avg/p95:    0/   1/   0.16/   1.00    168ms total, 297619.05 ops/sec\n SET 4KiB str,         1/5 min/max/avg/p95:    0/   3/   0.03/   0.00   1670ms total,  29940.12 ops/sec\n SET 4KiB str,        50/5 min/max/avg/p95:    0/   5/   0.94/   2.00    941ms total,  53134.96 ops/sec\n SET 4KiB str,  batch 50/5 min/max/avg/p95:    0/   2/   0.49/   1.00    984ms total, 101626.02 ops/sec\n SET 4KiB buf,         1/5 min/max/avg/p95:    0/   1/   0.05/   0.00   2423ms total,  20635.58 ops/sec\n SET 4KiB buf,        50/5 min/max/avg/p95:    0/   5/   1.60/   3.00   1598ms total,  31289.11 ops/sec\n SET 4KiB buf,  batch 50/5 min/max/avg/p95:    0/   1/   0.41/   1.00    825ms total, 121212.12 ops/sec\n GET 4KiB str,         1/5 min/max/avg/p95:    0/   1/   0.03/   0.00   1483ms total,  33715.44 ops/sec\n GET 4KiB str,        50/5 min/max/avg/p95:    0/   3/   0.69/   1.00    691ms total,  72358.90 ops/sec\n GET 4KiB str,  batch 50/5 min/max/avg/p95:    0/   2/   0.38/   1.00    759ms total, 131752.31 ops/sec\n GET 4KiB buf,         1/5 min/max/avg/p95:    0/   3/   0.03/   0.00   1485ms total,  33670.03 ops/sec\n GET 4KiB buf,        50/5 min/max/avg/p95:    0/   3/   0.80/   2.00    797ms total,  62735.26 ops/sec\n GET 4KiB buf,  batch 50/5 min/max/avg/p95:    0/   2/   0.39/   1.00    396ms total, 126262.63 ops/sec\n         INCR,         1/5 min/max/avg/p95:    0/   2/   0.03/   0.00   1376ms total,  36337.21 ops/sec\n         INCR,        50/5 min/max/avg/p95:    0/   3/   0.53/   1.00    529ms total,  94517.96 ops/sec\n         INCR,  batch 50/5 min/max/avg/p95:    0/   1/   0.17/   1.00    339ms total, 294985.25 ops/sec\n        LPUSH,         1/5 min/max/avg/p95:    0/   3/   0.03/   0.00   1394ms total,  35868.01 ops/sec\n        LPUSH,        50/5 min/max/avg/p95:    0/   3/   0.58/   1.00    584ms total,  85616.44 ops/sec\n        LPUSH,  batch 50/5 min/max/avg/p95:    0/   1/   0.19/   1.00    383ms total, 261096.61 ops/sec\n    LRANGE 10,         1/5 min/max/avg/p95:    0/   4/   0.03/   0.00   1706ms total,  29308.32 ops/sec\n    LRANGE 10,        50/5 min/max/avg/p95:    0/   3/   0.71/   1.00    712ms total,  70224.72 ops/sec\n    LRANGE 10,  batch 50/5 min/max/avg/p95:    0/   1/   0.38/   1.00    772ms total, 129533.68 ops/sec\n   LRANGE 100,         1/5 min/max/avg/p95:    0/   1/   0.06/   1.00   3026ms total,  16523.46 ops/sec\n   LRANGE 100,        50/5 min/max/avg/p95:    0/   5/   1.88/   3.00   1882ms total,  26567.48 ops/sec\n   LRANGE 100,  batch 50/5 min/max/avg/p95:    2/   4/   2.09/   3.00   4189ms total,  23872.05 ops/sec\n SET 4MiB buf,         1/5 min/max/avg/p95:    1/   7/   2.08/   3.00   1044ms total,    478.93 ops/sec\n SET 4MiB buf,        20/5 min/max/avg/p95:   17/  50/  40.02/  46.00   1022ms total,    489.24 ops/sec\n SET 4MiB buf,  batch 20/5 min/max/avg/p95:   37/  45/  39.00/  44.40    975ms total,    512.82 ops/sec\n GET 4MiB str,         1/5 min/max/avg/p95:    4/  15/   6.31/  10.00    634ms total,    157.73 ops/sec\n GET 4MiB str,        20/5 min/max/avg/p95:    7/ 124/  88.27/ 110.80    476ms total,    210.08 ops/sec\n GET 4MiB str,  batch 20/5 min/max/avg/p95:   76/  99/  89.00/  99.00    446ms total,    224.22 ops/sec\n GET 4MiB buf,         1/5 min/max/avg/p95:    4/  12/   5.67/  10.00    568ms total,    176.06 ops/sec\n GET 4MiB buf,        20/5 min/max/avg/p95:   14/ 133/  85.34/ 107.95    458ms total,    218.34 ops/sec\n GET 4MiB buf,  batch 20/5 min/max/avg/p95:   78/  96/  88.00/  96.00    440ms total,    227.27 ops/sec\nEnd of tests. Total time elapsed: 50421 ms\n```\n\nThe hiredis and js parser should most of the time be on the same level. The js parser lacks speed for large responses though.\nTherefor the hiredis parser is the default used in node_redis and we recommend using the hiredis parser. To use `hiredis`, do:\n\n    npm install hiredis redis\n\n## Debugging\n\nTo get debug output run your `node_redis` application with `NODE_DEBUG=redis`.\n\n## How to Contribute\n- Open a pull request or an issue about what you want to implement / change. We're glad for any help!\n\n## Contributors\nMany [people](https://github.com/NodeRedis/node_redis/graphs/contributors) have have added features and fixed bugs in `node_redis`. Thanks to all of them!\n\n## LICENSE - \"MIT License\"\n\nCopyright (c) by NodeRedis\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nOriginally developed by Matthew Ranney, http://ranney.com/",
  "readmeFilename": "README.md",
  "_id": "redis@2.2.3",
  "dist": {
    "shasum": "855563914999c66f49de4fa5954d887a7a5fb00b"
  },
  "_from": "redis@2.2.3",
  "_resolved": "https://registry.npmjs.org/redis/-/redis-2.2.3.tgz"
}
