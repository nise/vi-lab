<% layout( '../admin-layout' ) -%>


<h2>Edit template: <span id="templateTitle" class="xeditable str"><%=: items.title  %></span></h2>

<form
	id="scriptTemplateForm" 
	action="/admin/scripts/templates/update/<%= items._id %>"
	method="POST"
	accept-charset="utf-8" 
>
<!-- Metadata -->
<div class="row">
	<div class="col-md-6">
		<textarea class="script-form supplements form-control" id="templateDescription"><%= items.description %></textarea>
		<br/>
		<div class="input-group input-group-xs">
			<span class="input-group-addon" id="tags">Tags</span>
			<input type="text" id="templateTags" class="form-control" placeholder="tag1,tag2,..." aria-describedby="Tags describing the script template" name="name" value="<%= items.tags %>">
		</div>
	</div>	
</div>		
<!-- Phases -->
<div class="phases" id="sortable">
<% if ( items.phases) { 
	phase_i = -1
%>
	<% items.phases.forEach(function( phase ){ 
		phase_i++
	%>
		<% include scripts-template-phases %>
	<% }) %>
<% } %>
</div>
<button id="add-phase" type="button" class="btn btn-secondary right" aria-expanded="false">
<span class="glyphicon glyphicon-plus"> </span> Add Phase
</button>
<br><br><br>
<div class="buttons">
	<button type="submit" class="btn-primary btn">save template</button>  
	<a href="/admin/scripts/templates">cancel</a> 
	<a class="alert-btn right" href="/admin/scripts/templates/destroy/<%= items._id %>" title="Delete this Template">delete</a>
</div>
</form>


<script>

/*
todo
- bug: events in a popover are gone after second call
- add widgets options other then Boolean
- consider global widgets that cover multiple phases
- 
*/

/* make phases sortable */
	$( function() {
    $( "#sortable" ).sortable({
			//containment: "parent"
    	placeholder: "highlight"
    	
    });
    $( "#sortable" ).disableSelection();
  } );

/**/
	var frmMeta = $('#scriptTemplateForm');
	frmMeta.submit(function(e) { 
		e.preventDefault();
		var data = {
			title: escapeSpecialChars($('#templateTitle').text()),
			description: $('#templateDescription').val(),
			tags : $('#templateTags').val().split(','),
			phases: [] 
		};
		
		$('.phase').each(function(i, val){
			// collect phases
			var phase = { 
    			title: escapeSpecialChars($(this).find('.phase-title').text()),
    			instruction: escapeSpecialChars($(this).find('textarea.task').val()),
    			supplements: escapeSpecialChars($(this).find('textarea.supplements').val()),//'#phase-supplements_'+i, //  
    			seq : i,
    			groupindex: i,
    			widgets: []
    		};
    	// collect widgets per phase	  
    	$('#widgets-'+i+' button.the-widgets').each(function(j, widget){
    		var w = $(this).data('widget');  
    		var widget = {
						label : w.label,
						name: w.name,
						widget_options: w.widget_options,// [Schema.Types.Mixed], 
						canBeAnnotated: w.canBeAnnotated 
					}; 
 				phase.widgets.push(widget);
    	});
    	// collect videos per phase
  		var videos = $(this).find('.phase-video-list input:checked').map(function() {
  			return this.value;
			}).get(); 
			phase.video_files = videos;
			data.phases.push(phase);
		});
		//alert(JSON.stringify(data))
		//return
			
		$.ajax({
			type: "POST", 
			url: frmMeta.attr('action'),
			contentType: "application/json",
			data: JSON.stringify(data),
			error: function(xhr) {
				console.log(xhr)
			},
			success: function(res) { 
				// redirect 
				window.location.href = '/admin/scripts	/templates';
			}
		});
		return false;
	});

function escapeSpecialChars(s) { 
    return encodeURIComponent(s);
    return s.replace(/\n/g, "\\n")
               .replace(/\'/g, "\\'")
               .replace(/\"/g, '\\"')
               .replace(/\&/g, "\\&")
               .replace(/\r/g, "\\r")
               .replace(/\t/g, "\\t")
               .replace(/\b/g, "")
               .replace(/\f/g, "\\f");
};

//
$('textarea').each(function(i, val){
	$(this).val( decodeURIComponent($(this).val()) );
})
$('.str').each(function(i, val){
	$(this).text( decodeURIComponent($(this).text()) );
})



// make it editable
$.fn.editable.defaults.mode = 'inline'; // popup
$(document).ready(function() {
	// make text editable inline
	$('.xeditable').editable({
		//escape:true,
		success: function(response, value) {
        //alert($(this).attr('id') +'__'+value)   
   	}
	});
	
	// task/supplements tabs
	$('.nav-tabs a').click(function(){
    $(this).tab('show');
})
	
	// load data to form
	var data = JSON.parse('<%-JSON.stringify( items.phases )%>'); 
	$.each( data, function(i, phase){
		// fill dropdown for adding widgets
		for (var ii = 0; ii < defaultWidgets.length; ii++){  
			if( getExistingWidgets( phase.widgets ).indexOf(defaultWidgets[ii].name) === -1){ 
				addWidgetDropDownItem(i, defaultWidgets[ii]);                
			} 
		}
		// list available videos
		$.get('/json/admin/video-files', function(files){ 
			$.each(files, function(j, val){
				var checked = data[i].video_files.indexOf( val._id ) === -1 ?  '' : 'checked'; 
				$('#videos_'+i).append( $('<label><input type="checkbox"  '+ checked +' value="'+val._id+'" name="video-files-'+j+'" aria-label="'+val.title+'"> '+val.title+' ('+val.creator+')</label><br>' ) );
			});
		});
		
		// add widgets
		$.each( phase.widgets, function(j, widget){ //alert( JSON.stringify(widget))
			$('#widgets-'+i).prepend( buildWidget(widget, i) );
		});		
	});
	

	
	// add a new phase
	$('#add-phase').click(function(){
		require(['text!../views/admin/scripts-template-phases.ejs', 'ejs'], function(thetemplate) {
			var
				pos = $('.phases > div').length; 
				html = ejs.render(thetemplate, {phase: {title:'new phase', instruction:'', supplement:''}, phase_i: pos });
			$('.phases').append(html);
			// init dropdown
			for (var ii = 0; ii < defaultWidgets.length; ii++){  
				addWidgetDropDownItem( pos, defaultWidgets[ii]);                
			}  
			// list available videos
			$.get('/json/admin/video-files', function(files){ 
				$.each(files, function(i, val){ 
					var checked = '';//data[pos].video_files.indexOf( val._id ) ? 'checked' : ''; 
					$('#videos_'+pos).append( $('<label><input type="checkbox" '+ checked +' aria-label="'+val.title+'"> '+val.title+' ('+val.creator+')</label><br>' ) );
				});
			});
			// make editable
			$('.xeditable').editable({
				//escape:true
			});
		}); // end require	
	});


	
});

// convert dates
$('.date').each(function(i, val){ 
	var t =  moment().format(); 
	$(this).html( t );
});


/*
 *
 **/
function handleDropdownClick(e) {
	var widget = e.data.widget;//getWidgetByName( e.data.widget.name );
	$('#widgets-'+e.data.phase).prepend( buildWidget( widget, e.data.phase) );
	// remove entry
	$(e.target).parent().remove();
	// toggle
	$('#widgetSelectorDropdown-'+e.data.phase).dropdown('toggle'); 
	e.preventDefault();
	return false;
};


/***/
function addWidgetDropDownItem(phase, widget){ //alert(JSON.stringify(widget))
	var 
		dropdown = document.getElementById('widgetSelectorDropdown-' + phase),
  	li = document.createElement("li"),
  	link = document.createElement("a"),             
  	text = document.createTextNode( widget.name )
  	;
  link.appendChild(text);
  link.href = "#";
  $(link).unbind('click', {phase: phase, widget: widget}, handleDropdownClick ); 
	$(link).bind('click', {phase: phase, widget: widget}, handleDropdownClick ); 	
  li.appendChild(link);
  dropdown.appendChild(li);
} 

/*
 **/
function buildWidget(widget, phase){ //alert(JSON.stringify(widget))
	var b = $('<button></button>')
				.attr('id', 'widget-'+ phase +'-'+widget.name)
				.attr('name', widget.name )
				.attr('type',"button") 
				.addClass("btn btn-sm btn-info widget-popover the-widgets widget-type-"+widget.type)
				.text( widget.label )
				.data('widget', widget)
				.popover({
					title : '<b>Settings</b>',
					html : true,
					//container: 'body',
					//trigger: 'focus',
					placement: 'top',
					content : renderWidgetOptions( widget, '#widget-'+ phase +'-'+widget.name, phase)
				})
				;		
	return b;						
}


// render widget options
function renderWidgetOptions(widget, selector, phase){ 
	var 
	 keys = ['hasTimelineMarker','hasMenu','allowReplies','allowEditing','allowCreation','allowEmoticons','allowComments' ],
	 html = $('<div></div>')
	 w = widget.widget_options
	 ;  
	for (key in w ){ //alert(keys.indexOf( key ))
		if( w.hasOwnProperty(key) && keys.indexOf( key ) !== -1 ){
			var check = $('<input />')
				.attr('aria-label', key)
				.attr('checked', w[key] ? true : false )
				.attr('type', 'checkbox')
				.attr('name', key)
				//.attr('value', w[key])
				//.unbind('change')
				.bind('change', function(e){ //alert(2)
					var data = $(selector).data('widget');
					if($(this).not(':checked')){
						data.widget_options[ $(this).attr('name') ] = false;
					}else{
						data.widget_options[ $(this).attr('name') ] = true;
					}
					$(selector).data('widget', data)
				});
			
			html.append( $('<label></label>').text(key).prepend(check) ).append('<br>');
		}
	}
	// add delte btn
	var del = $('<span id="delete" class="alert-btn">remove widget</span>')
		.click(function(){  //alert(JSON.stringify(widget))
			// append removed widget as item to the dropdown
			addWidgetDropDownItem( phase, widget);
			
			// remove widget
			$(selector)
				//.popover('hide')		
				.popover('destroy')
				.remove()
				;
		});
	html.append(del) 
	return html;
}



$('body')
	.on('hidden.bs.popover', function() {
    var tooltips = $('.popover').not('.in');
    if (tooltips) {
        tooltips.remove();
    }
	});


defaultWidgets = [
	{ label : 'StrawPoll',
		name: 'strawpoll', 
 		canBeAnnotated:true, 
 		type : 'thinkLet',
 		widget_options: {
			path: '/static/img/user-icons/'
		}
	},
	{ label : 'BucketSchuffel',
		name: 'bucketshuffel', 
 		canBeAnnotated:true, 
 		type : 'thinkLet',
 		widget_options: {
			path: '/static/img/user-icons/'
		}
	},
	{ label : 'Synchronized Slides',
		name: 'syncMedia', 
 		canBeAnnotated:false, 
 		type : 'annotation',
 		widget_options: {
			selector: '.syncMedia', 
			hasTimelineMarker: true, 
			controls: true, 
			timelineSelector : '.vi2-timeline-main',
			hasMenu: false,
			menuSelector:'.synMediaMenu',
			prefix_path: '/static/img/slides/', 
			sync: true, 
			placeholder:'/static/img/placeholder.jpg'
		}
	},
	{ label : 'Table of Content',
		name: 'toc', 
 		canBeAnnotated:true, 
 		type : 'annotation',
 		widget_options: {
			hasTimelineMarker: true, 
			timelineSelector : '.vi2-timeline-main',
			hasMenu : true,
			menuSelector: '#toc',
			allowEditing : true,
			allowCreation : true,
			path: '/static/img/user-icons/'
		}
	},
	{ label : 'Hyperlinks',
		name: 'hyperlinks', 
 		canBeAnnotated:true, 
 		type : 'annotation',
 		widget_options: {
	 		displaySelector: '#seq',
			hasTimelineMarker: true, 
			timelineSelector : '.vi2-timeline-main',
			hasMenu : true,
			menuSelector: '#hyperlinks',
			minDuration: 5, // seconds
			allowEditing : true,
			allowCreation : true,
			path: '/static/img/user-icons/'
		}
	},
	{ label : 'Comments',
		name: 'comments', 
		canBeAnnotated:true, 
		type : 'annotation',
 		widget_options: {
 			hasTimelineMarker: true,
 			timelineSelector : '.vi2-timeline-bottom', 
			hasMenu : true,
			menuSelector: '#comments',
			allowReplies : true, // tipical for comments
			allowEmoticons : true, 
			allowEditing : true,
			allowCreation : true, 
			path: '/static/img/user-icons/'
 		}
 	},
 	{	label : 'Video Assessment',
 		name : 'assessment',
	 	canBeAnnotated:true, 
		type : 'annotation',
		widget_options : { 
			displaySelector: '#overlay',
			hasTimelineMarker: true,
		  timelineSelector : '.vi2-timeline-top', 
			hasMenu : true,
			menuSelector: '#assessment',
			allowComments : true,
			allowEditing : true,
			allowCreation : true, 
			path: '/static/img/user-icons/'
		 }
	},
	{	label : 'Video Analysis',
 		name : 'assessmentanalysis',
	 	canBeAnnotated:true, 
		type : 'annotation',
		widget_options : { 
			displaySelector: '#overlay',
			hasTimelineMarker: true,
		  timelineSelector : '.vi2-timeline-top', 
			hasMenu : true,
			menuSelector: '#assessment2',
			allowComments : true,
			allowEditing : true,
			allowCreation : true, 
			path: '/static/img/user-icons/'
		 }
	},
	{
		label : 'Skip Back',
		name : 'skipBack',
		type : 'player-widget',
		widget_options : {
			selector : '.control-bar',
			label : '',
			step : 5 // in seconds
		}
	},{
		label : 'Playback Speed',
		name : 'playbackSpeed',
		type : 'player-widget',
		widget_options : {
			selector: '.control-bar',
			videoSelector : 'video1',
			speed_steps: [0.3,0.5,0.7,1.0,1.5,1.7,2.0]//[0.3,0.5,0.8,1.0,1.5,2.0,3.0,4.0]	
		}
	}	
];


function getExistingWidgets(arr){
	var s = [];
	for(w in arr){
		if( arr.hasOwnProperty(w) ){ 
			s.push( arr[w].name )		
		}
	}
	return s;
}

/*
 **/
function getWidgetByName(name){
	var len = defaultWidgets.length
	for(var i=0; i < len; i++){
		if(defaultWidgets[i].name === name){
			return defaultWidgets[i];
		}
	}
	return undefined;
} 

</script>

